http://tonl.iteye.com/blog/1948869

对Eclipse的工程写单元测试：
第一步：
1. 一个工程有多个测试类，将测试类放到一个测试包utpkg下。
2. 每一个测试类写好，都单独执行run as ->JUnit Test测一下。
 
第二步：
1. 所有的测试类写好后，对工程右键->export->General->Ant Buildfiles=>next->选中工程名，默认的选项：name for and buildfile：build.xml；JUnit output directory：JUnit（不用手动创建，执行build.xml时会自动生成）.=>finish.
2. 在工程下会生成一个build.xml的蚂蚁图标的文件。
 
第三步：
1. 右击build.xml文件，->run as->3 ant build...
2. 在Targets栏下选择要执行的targets. build[default]是默认的。其他可以自己根据需要，选择待执行的测试类。
  注意：这些是有顺序的，可以自行调整顺序。
3. 选好之后，Run.
 
第四步：
查看Run结束的结果。
1. 在工程下会生成一个junit的文件夹，下面有一系列的文件。

@Test：
表明该方法是一个测试方法
 
@BeforeClass 和 @AfterClass：
测试用例初始化时执行 @BeforeClass方法，当所有测试执行完毕之后，执行@AfterClass进行收尾工作。标注、@BeforeClass 和 @AfterClass的方法必须是static的，因为方法将在类被装载的时候就被调用，那时候还没创建测试对象实例。
 
@Before： 
使用了该元数据的方法在每个测试方法执行之前都要执行一次。
@After： 
使用了该元数据的方法在每个测试方法执行之后要执行一次。
 
@Test(expected=*.class) ：
通过@Test元数据中的expected属性验证是否抛出期望的异常，expected属性的值是一个异常的类型，如果抛出了期望的异常，则测试通过，否则不通过。
 
@Test(timeout=xxx)：
该元数据传入了一个时间（毫秒）给测试方法，如果测试方法在制定的时间之内没有运行完，则测试也失败。
 
@Ignore： 
该元数据标记的测试方法在测试中会被忽略。同时可以为该标签传递一个String的参数，来表明为什么会忽略这个测试方法。比如：@lgnore("该方法还没有实现")，在执行的时候，仅会报告该方法没有实现，而不会运行测试方法。

// is匹配符表明如果前面待测的object等于后面给出的object，则测试通过 
assertThat( testedObj, is( object) ); 
 
// containsString匹配符表明如果测试的字符串包含指定的子字符串则测试通过
 assertThat( testedString, containsString( "developerWorks" ) );
 
// greaterThan匹配符表明如果所测试的数值testedNumber大于16.0则测试通过
 assertThat( testedNumber, greaterThan(16.0) ); 
 
// closeTo匹配符表明如果所测试的浮点型数testedDouble在20.0±0.5范围之内则测试通过 
assertThat( testedDouble, closeTo( 20.0, 0.5 ) );
 
//hasItem匹配符表明被测的迭代对象含有元素element项则测试通过assertThat(iterableObject, hasItem (element));
